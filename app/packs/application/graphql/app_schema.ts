import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
};

export type Appointment = {
  __typename?: 'Appointment';
  course: Course;
  faculty: Faculty;
  id: Scalars['ID']['output'];
  student: Student;
};

export type Authentication = {
  __typename?: 'Authentication';
  id: Scalars['ID']['output'];
  ip: Scalars['String']['output'];
  user: Me;
};

export type Course = {
  __typename?: 'Course';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type Faculty = {
  __typename?: 'Faculty';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type LoginInput = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
};

/** Autogenerated return type of LoginMutation. */
export type LoginMutationPayload = {
  __typename?: 'LoginMutationPayload';
  authentication?: Maybe<Authentication>;
  error?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated return type of LogoutMutation. */
export type LogoutMutationPayload = {
  __typename?: 'LogoutMutationPayload';
  authentication?: Maybe<Authentication>;
};

export type Me = {
  __typename?: 'Me';
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  login: LoginMutationPayload;
  logout: LogoutMutationPayload;
};


export type MutationLoginArgs = {
  input: LoginInput;
};

export type Query = {
  __typename?: 'Query';
  appointments: Array<Appointment>;
  courses: Array<Course>;
  faculties: Array<Faculty>;
  users: Array<User>;
};

export type Student = {
  __typename?: 'Student';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type LoginMutationVariables = Exact<{
  input: LoginInput;
}>;


export type LoginMutation = { __typename?: 'Mutation', login: { __typename?: 'LoginMutationPayload', error?: string | null, authentication?: { __typename?: 'Authentication', id: string, user: { __typename?: 'Me', id: string, name: string } } | null } };

export type LogoutMutationVariables = Exact<{ [key: string]: never; }>;


export type LogoutMutation = { __typename?: 'Mutation', logout: { __typename?: 'LogoutMutationPayload', authentication?: { __typename?: 'Authentication', id: string, user: { __typename?: 'Me', id: string, name: string } } | null } };

export type AdminAppointmentsQueryVariables = Exact<{ [key: string]: never; }>;


export type AdminAppointmentsQuery = { __typename?: 'Query', appointments: Array<{ __typename?: 'Appointment', id: string, student: { __typename?: 'Student', id: string, name: string }, faculty: { __typename?: 'Faculty', id: string, name: string }, course: { __typename?: 'Course', id: string, name: string } }> };

export type AdminCoursesQueryVariables = Exact<{ [key: string]: never; }>;


export type AdminCoursesQuery = { __typename?: 'Query', courses: Array<{ __typename?: 'Course', id: string, name: string }> };

export type AdminFacultiesQueryVariables = Exact<{ [key: string]: never; }>;


export type AdminFacultiesQuery = { __typename?: 'Query', faculties: Array<{ __typename?: 'Faculty', id: string, name: string }> };

export type AdminUsersQueryVariables = Exact<{ [key: string]: never; }>;


export type AdminUsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: string, name: string }> };

export type CoursesQueryVariables = Exact<{ [key: string]: never; }>;


export type CoursesQuery = { __typename?: 'Query', courses: Array<{ __typename?: 'Course', id: string, name: string }> };

export type FacultiesQueryVariables = Exact<{ [key: string]: never; }>;


export type FacultiesQuery = { __typename?: 'Query', faculties: Array<{ __typename?: 'Faculty', id: string, name: string }> };


export const LoginDocument = gql`
    mutation Login($input: LoginInput!) {
  login(input: $input) {
    error
    authentication {
      id
      user {
        id
        name
      }
    }
  }
}
    `;
export type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);
      }
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;
export const LogoutDocument = gql`
    mutation Logout {
  logout {
    authentication {
      id
      user {
        id
        name
      }
    }
  }
}
    `;
export type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;

/**
 * __useLogoutMutation__
 *
 * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLogoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [logoutMutation, { data, loading, error }] = useLogoutMutation({
 *   variables: {
 *   },
 * });
 */
export function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, options);
      }
export type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;
export type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;
export type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;
export const AdminAppointmentsDocument = gql`
    query AdminAppointments {
  appointments {
    id
    student {
      id
      name
    }
    faculty {
      id
      name
    }
    course {
      id
      name
    }
  }
}
    `;

/**
 * __useAdminAppointmentsQuery__
 *
 * To run a query within a React component, call `useAdminAppointmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminAppointmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminAppointmentsQuery({
 *   variables: {
 *   },
 * });
 */
export function useAdminAppointmentsQuery(baseOptions?: Apollo.QueryHookOptions<AdminAppointmentsQuery, AdminAppointmentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminAppointmentsQuery, AdminAppointmentsQueryVariables>(AdminAppointmentsDocument, options);
      }
export function useAdminAppointmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminAppointmentsQuery, AdminAppointmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminAppointmentsQuery, AdminAppointmentsQueryVariables>(AdminAppointmentsDocument, options);
        }
export type AdminAppointmentsQueryHookResult = ReturnType<typeof useAdminAppointmentsQuery>;
export type AdminAppointmentsLazyQueryHookResult = ReturnType<typeof useAdminAppointmentsLazyQuery>;
export type AdminAppointmentsQueryResult = Apollo.QueryResult<AdminAppointmentsQuery, AdminAppointmentsQueryVariables>;
export const AdminCoursesDocument = gql`
    query AdminCourses {
  courses {
    id
    name
  }
}
    `;

/**
 * __useAdminCoursesQuery__
 *
 * To run a query within a React component, call `useAdminCoursesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminCoursesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminCoursesQuery({
 *   variables: {
 *   },
 * });
 */
export function useAdminCoursesQuery(baseOptions?: Apollo.QueryHookOptions<AdminCoursesQuery, AdminCoursesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminCoursesQuery, AdminCoursesQueryVariables>(AdminCoursesDocument, options);
      }
export function useAdminCoursesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminCoursesQuery, AdminCoursesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminCoursesQuery, AdminCoursesQueryVariables>(AdminCoursesDocument, options);
        }
export type AdminCoursesQueryHookResult = ReturnType<typeof useAdminCoursesQuery>;
export type AdminCoursesLazyQueryHookResult = ReturnType<typeof useAdminCoursesLazyQuery>;
export type AdminCoursesQueryResult = Apollo.QueryResult<AdminCoursesQuery, AdminCoursesQueryVariables>;
export const AdminFacultiesDocument = gql`
    query AdminFaculties {
  faculties {
    id
    name
  }
}
    `;

/**
 * __useAdminFacultiesQuery__
 *
 * To run a query within a React component, call `useAdminFacultiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminFacultiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminFacultiesQuery({
 *   variables: {
 *   },
 * });
 */
export function useAdminFacultiesQuery(baseOptions?: Apollo.QueryHookOptions<AdminFacultiesQuery, AdminFacultiesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminFacultiesQuery, AdminFacultiesQueryVariables>(AdminFacultiesDocument, options);
      }
export function useAdminFacultiesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminFacultiesQuery, AdminFacultiesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminFacultiesQuery, AdminFacultiesQueryVariables>(AdminFacultiesDocument, options);
        }
export type AdminFacultiesQueryHookResult = ReturnType<typeof useAdminFacultiesQuery>;
export type AdminFacultiesLazyQueryHookResult = ReturnType<typeof useAdminFacultiesLazyQuery>;
export type AdminFacultiesQueryResult = Apollo.QueryResult<AdminFacultiesQuery, AdminFacultiesQueryVariables>;
export const AdminUsersDocument = gql`
    query AdminUsers {
  users {
    id
    name
  }
}
    `;

/**
 * __useAdminUsersQuery__
 *
 * To run a query within a React component, call `useAdminUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminUsersQuery({
 *   variables: {
 *   },
 * });
 */
export function useAdminUsersQuery(baseOptions?: Apollo.QueryHookOptions<AdminUsersQuery, AdminUsersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminUsersQuery, AdminUsersQueryVariables>(AdminUsersDocument, options);
      }
export function useAdminUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUsersQuery, AdminUsersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminUsersQuery, AdminUsersQueryVariables>(AdminUsersDocument, options);
        }
export type AdminUsersQueryHookResult = ReturnType<typeof useAdminUsersQuery>;
export type AdminUsersLazyQueryHookResult = ReturnType<typeof useAdminUsersLazyQuery>;
export type AdminUsersQueryResult = Apollo.QueryResult<AdminUsersQuery, AdminUsersQueryVariables>;
export const CoursesDocument = gql`
    query Courses {
  courses {
    id
    name
  }
}
    `;

/**
 * __useCoursesQuery__
 *
 * To run a query within a React component, call `useCoursesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCoursesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCoursesQuery({
 *   variables: {
 *   },
 * });
 */
export function useCoursesQuery(baseOptions?: Apollo.QueryHookOptions<CoursesQuery, CoursesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CoursesQuery, CoursesQueryVariables>(CoursesDocument, options);
      }
export function useCoursesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CoursesQuery, CoursesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CoursesQuery, CoursesQueryVariables>(CoursesDocument, options);
        }
export type CoursesQueryHookResult = ReturnType<typeof useCoursesQuery>;
export type CoursesLazyQueryHookResult = ReturnType<typeof useCoursesLazyQuery>;
export type CoursesQueryResult = Apollo.QueryResult<CoursesQuery, CoursesQueryVariables>;
export const FacultiesDocument = gql`
    query Faculties {
  faculties {
    id
    name
  }
}
    `;

/**
 * __useFacultiesQuery__
 *
 * To run a query within a React component, call `useFacultiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useFacultiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFacultiesQuery({
 *   variables: {
 *   },
 * });
 */
export function useFacultiesQuery(baseOptions?: Apollo.QueryHookOptions<FacultiesQuery, FacultiesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FacultiesQuery, FacultiesQueryVariables>(FacultiesDocument, options);
      }
export function useFacultiesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FacultiesQuery, FacultiesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FacultiesQuery, FacultiesQueryVariables>(FacultiesDocument, options);
        }
export type FacultiesQueryHookResult = ReturnType<typeof useFacultiesQuery>;
export type FacultiesLazyQueryHookResult = ReturnType<typeof useFacultiesLazyQuery>;
export type FacultiesQueryResult = Apollo.QueryResult<FacultiesQuery, FacultiesQueryVariables>;